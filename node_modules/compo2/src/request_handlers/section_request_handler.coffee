fs = require 'fs'
AsEcoRenderer = require '../renderers/as_eco_renderer.coffee'
AsEjsRenderer = require '../renderers/as_ejs_renderer.coffee'
CoffeeScriptController = require '../controllers/coffeescript_controller.coffee'
EmptyController = require '../controllers/empty_controller.coffee'
EmptyRenderer = require '../renderers/empty_renderer.coffee'
LazyLoadingRequestHandler = require './lazy_loading_request_handler.coffee'
NotFoundRenderer = require '../renderers/not_found_renderer.coffee'
Section = require '../section.coffee'
StaticFileRenderer = require '../renderers/static_file_renderer.coffee'
StringTools = require '../tools/string_tools'


# A request handler for a normal section.
#
# A section is a file that is in a directory that contains a DOM template.
# It could be accompanied by a controller.
#
# This request handler lazily instantiates its components (controller, views etc).
class SectionRequestHandler extends LazyLoadingRequestHandler

  constructor: ->
    super

    # The async controller function for this section.
    @controller = null

    # The renderer for this section.
    @renderer = null



  # Returns the controller function for this section,
  # or undefined if this section has no controller.
  create_controller_function: ->
    section = new Section @path, @configuration
    controller_filename = section.controller_filename()
    return new EmptyController() unless controller_filename
    new CoffeeScriptController controller_filename


  # Creates the renderer given the partial filename.
  create_renderer: ->
    if StringTools.ends_with @path, '.html'
      @renderer = new StaticFileRenderer @path
    else if StringTools.ends_with @path, '.as_eco'
      @renderer = new AsEcoRenderer @path
    else if StringTools.ends_with @path, '.as_ejs'
      @renderer = new AsEjsRenderer @path
    else
      @renderer = new EmptyRenderer()
      # Set metadata to 404 here.


  # Sets the default metadata for responses.
  get_default_metadata: ->
    # TODO: create the right one here, from the filename.
    result =
      mime_type: 'application/html'
      response_code: 200
    result


  # Loads the response.
  load_response: (done) =>
    @controller = @create_controller_function()
    @renderer = @create_renderer()
    done()


  # Processes the given request.
  process_request_directly: (request, response, params, done) =>

    # Run the controller logic.
    @controller.execute request, response, params, (controller_params) =>
      # TODO: Set response metadata here.

      # Run the renderer.
      @renderer.render response, controller_params, ->
        response.end ''
        done()



module.exports = SectionRequestHandler
