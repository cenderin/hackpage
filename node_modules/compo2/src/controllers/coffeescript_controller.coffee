CompilerTools = require 'coffeescript_compiler_tools'
StringBuilder = require 'string_builder.js'
fs = require 'fs'


# Represents an asynchronous controller for a section, written in CoffeeScript.
#
# Lazy loads and compiles the controller method on the first request to it.
class CoffeeScriptController

  constructor: (@path) ->

    # The controller method that will be called for requests.
    @method = @lazy_load_controller_method


  # Placeholder method for lazy loading the controller method from disk.
  #
  # When called, loads the controller method from disk, instantiates it,
  # and calls it. Subsequent calls will then call the compiled method directly.
  lazy_load_controller_method: (this_object) =>
    @load_controller_method =>
      @method.call this_object


  # Loads the controller method from disk,
  # and replaces the lazy loader method with it.
  load_controller_method: (done) ->
    fs.readFile @path, (err, data) =>
      return "ERROR: cannot read controller file '#{@path}': #{err}" if err
      @method = CompilerTools.compile_function CoffeeScriptController.controller_function_source(data.toString())
      done()


  # Creates the source code for the controller function.
  @controller_function_source: (body) ->
    lines = body.split "\n"
    StringBuilder builder = new StringBuilder()
    builder.append '->\n'
    builder.append "  #{line}\n" for line in lines
    builder.toString()


  # Run the controller method with the given request and response.
  # Returns the data
  execute: (request, response, params, callback) ->
    this_object =
      request: request
      response: response
      params: params
      render: (render_params) ->
        callback @, render_params

    # Note (KG): Need to call this method with both 'this' and the first param set to the this object,
    #            because this method could be either the real controller method (uses 'this'), or
    #            the lazy loading placeholder method (uses the parameter).
    #            This doesn't matter because the controller function interacts using the 'this' object,
    #            and ignores the parameters given to it.
    @method.call this_object, this_object



module.exports = CoffeeScriptController
