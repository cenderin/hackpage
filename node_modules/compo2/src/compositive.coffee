http = require 'http'
util = require 'util'
ContentParser = require './content_parser.coffee'
Router = require './routing/router.coffee'
StringBuilder = require 'string_builder.js'


# The main class, serving as the API through which clients can start/stop a Compositive web server.
class Compositive

  constructor: (@options={})  ->
    util.log "Compositive 0.1"
    @start_time = process.hrtime()

    # The different view types that we know of.
    @options['view_types'] = ['.as_eco', '.as_ejs', '.html']

    # The different controller types that we know of.
    @options['controller_types'] = ['coffee', 'js']

    # The Router instance for mapping incoming URLs to request handlers.
    @router = new Router @options

    # The http.Server instance from Node.js.
    @server = http.createServer @handle_request



  # Handles an incoming request.
  #
  # This method is called by Node.js' HTTP class to serve the given request.
  handle_request: (request, response) =>
    util.log "Request: #{request.method} '#{request.url}'"
    request.setEncoding 'utf8'

    # Read request data.
    body = new StringBuilder()
    request.on 'data', body.append

    # Handle unknown URL.
    [request_handler, request_data] = @router.get_handler request.method, request.url
    unless request_handler
      util.log "Cannot map route #{request.method} '#{request.url}' - 404"
      response.writeHead 404
      return response.end()

    # Handle the request once we got all the data.
    request.on 'end', =>
      post_data = ContentParser.parse body.toString(), request.headers['content-type']
      post_data[key] = value for key, value of request_data
      request_handler.process_request request, response, post_data, ->


  # Brings the server online at the given port.
  listen: (port, done) ->
    @router.find_routes =>
      @server.listen port
      duration = process.hrtime @start_time
      util.log "Compositive listening at port #{port} after #{Math.round((duration[0] * 1e9 + duration[1]) / 1e6)} ms."
      done() if done

  # Takes this Compositive server offline and stops it.
  close: ->
    @server.close()
    @server = null


module.exports = Compositive
