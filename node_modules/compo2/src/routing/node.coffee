# Represents a single node in the routing Trie.
class Node
  constructor: ->

    # The sub-routes underneath this node.
    @sub_nodes = {}

    # The node that handles URL params at this position.
    @wildcard_node = null

    # Handlers for each HTTP method
    @handlers = {}

    # Ordered list of the names of the URL parameters inside this URL.
    @param_names = undefined


  add: (path) ->
    params = []
    sub_route = @sub_route path, 0, yes, params
    [sub_route, params]


  get: (path) ->
    params = []
    sub_route = @sub_route path, 0, no, params
    [sub_route, params]


  sub_route: (path, index, adding, params) ->

    # Ignore empty path elements. This fixes bugs like double-slashes.
    return @sub_route path, index+1, adding, params if path[index] == ''

    # Return the current node if we have reached the end of the path.
    if index == path.length
      return @

    node_name = path[index]
    matched_node = @sub_nodes[node_name]
    unless matched_node
      if adding

        # No node matches and in adding mode --> create a new Node.
        if node_name[0] == ':'
          matched_node = @wildcard_node ?= new Node
          params.push node_name.substr(1)
        else
          matched_node = @sub_nodes[node_name] = new Node
      else if @wildcard_node
        # No node matches and in getting mode --> match the wildcard if it exists.
        params.push node_name
        matched_node = @wildcard_node

      else
        # No node matches, in getting mode, and no wildcard node --> return "node not found".
        return undefined

    matched_node.sub_route path, index+1, adding, params


module.exports = Node
