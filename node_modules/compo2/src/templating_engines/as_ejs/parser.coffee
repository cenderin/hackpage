StringTools = require '../../tools/string_tools'


# Parses AsEjs templates into a data structure in memory.
class Parser

  # Parses the given text into fully recognized segments.
  # This is the main method.
  @parse: (text) ->
    @recognize_js_segment(segment) for segment in @segments text


  # Segments the given text into TEXT and JS segments.
  @segments: (text) ->
    result = []

    # Whether we are in static text or inside a '<% ... %>' block right now.
    in_js = no

    # The current search pointer.
    search_ptr = 0

    text_length = text.length

    loop
      if !in_js
        # We are in static text.

        js_start_tag_pos = text.indexOf '<%', search_ptr
        if js_start_tag_pos == -1
          # We have reached the end of the string --> append the text segment and done.
          data = text.substring search_ptr
          result.push type: 'text', data: data if data
          return result
        else
          # We have reached a JS start tag.
          data = text.substring search_ptr, js_start_tag_pos
          result.push type: 'text', data: data if data
          search_ptr = js_start_tag_pos + 2
          in_js = yes
      else
        # We are in JS text.

        js_end_tag_pos = text.indexOf '%>', search_ptr
        if js_end_tag_pos == -1
          throw "ERROR: unclosed Javascript end tag at line #{search_ptr}."
        data = text.substring search_ptr, js_end_tag_pos
        result.push type: 'js', data: data
        search_ptr = js_end_tag_pos + 2
        in_js = no


  # Recognizes the given JS segment.
  @recognize_js_segment: (segment) ->
    if segment.type == 'text'
      return segment

    if segment.type == 'js'
      partitions = StringTools.partition segment.data, /[^\s]+/
      switch partitions[1]
        when '=' then return type: 'jsout', data: partitions[2].trim()
        when 'if' then return type: 'jsif', data: partitions[2].trim()
        when 'else' then return type: 'jselse', data: partitions[2].trim()
        when 'end' then return type: 'jsend', data: partitions[2].trim()
        when 'for' then return type: 'jsfor', data: partitions[2].trim()
        when 'async' then return type: 'jsasync', data: partitions[2]
        when 'section' then return type: 'jssection', data: partitions[2].trim()
        else return type: 'jsexp', data: "#{partitions[1]}#{partitions[2]}".trim()

    throw "ERROR: unknown segment type: '#{segment.type}'"


module.exports = Parser
