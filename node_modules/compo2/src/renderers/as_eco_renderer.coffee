AsEco = require '../templating_engines/as_eco/as_eco'


# Renderer for AS_ECO files.
#
# This class renders a view stored in an .as_eco file, using the given data structure
# coming from the controller, to the given Node.js response stream.
#
# It lazy loads and compiles the template on the first request.
# This implementation should stay lazy loaded even though the SectionRequestHandler already lazy instantiates this class,
# because lazy loading also ensures that everything is properly initialized when a request is processed,
# while avoiding crazy callback spaghetti during object initialization.
class AsEcoRenderer

  constructor: (@path) ->

    # The AsEco instance that renders this file.
    @as_eco = null


  # Placeholder method for lazy loading.
  # Loads and compiles the template, replaces @render with the real render method, and calls it to render the current response.
  render: (response, data, done) =>

    # Load and compile the render method.
    @as_eco = new AsEco()
    @as_eco.compile_file @path, =>
      @render = @render_directly
      @render response, data, done


  # Renders the template directly, assuming that it has been compiled by @load_and_render already.
  render_directly: (response, data, done) ->

    # We need to bind the 'write' function of the response to the response object,
    # because it is used as a callback here.
    writer_function = (text) -> response.write.call response, text

    @as_eco.render data, writer_function, done



module.exports = AsEcoRenderer

