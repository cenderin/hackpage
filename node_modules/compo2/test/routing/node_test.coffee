[expect, sinon] = require('../test_helper')
Node = require '../../src/routing/node.coffee'


describe 'Node', ->

  beforeEach ->
    @node = new Node()

  describe 'add', ->

    it 'adds the given node as a subnode if it has a normal name', ->
      @node.add ['one']
      expect(@node.sub_nodes['one']).to.not.be.undefined

    it 'works recursively', ->
      @node.add ['one', 'two']
      expect(@node.sub_nodes['one'].sub_nodes['two']).to.not.be.undefined

    it 'returns the captured node', ->
      result = @node.add ['one']
      expect(result[0]).to.not.be.undefined

    it 'ignores empty path segments', ->
      result = @node.add ['', 'one']
      expect(result[0]).to.not.be.undefined


    describe 'given a url parameter', ->

      it 'adds the given node as a wildcard', ->
        @node.add [':one']
        expect(@node.wildcard_node).to.not.be.undefined

      it 'returns the node and the captured URL param name', ->
        result = @node.add [':one']
        expect(result[0]).to.not.be.undefined
        expect(result[1]).to.eql ['one']

      it 'captures all the param names in the order they occur in the URL', ->
        result = @node.add [':one', 'foo', ':two']
        expect(result[1]).to.eql ['one', 'two']


  describe 'get', ->

    beforeEach ->
      @node.add ['one', ':id', 'two', ':name']

    it 'returns the node with the given path', ->
      result = @node.get ['one', '123', 'two', '456']
      expect(result[0]).to.not.be.undefined

    it 'returns the captured url params ', ->
      result = @node.get ['one', '123', 'two', '456']
      expect(result[1]).to.eql ['123', '456']

    it "returns undefined if the URL hasn't been found", ->
      result = @node.get ['zonk']
      expect(result[0]).to.be.undefined

    it 'ignores empty path segments', ->
      result = @node.get ['', 'one', '', '123', 'two', '456']
      expect(result[0]).to.not.be.undefined

