[expect, sinon] = require('../test_helper')
ObjectTools = require '../../src/tools/object_tools'
Router = require '../../src/routing/router.coffee'


describe 'Router', ->

  describe 'constructor', ->

    it 'stores the given configuration options', ->
      router = new Router foo: 'bar'
      expect(router.configuration['foo']).to.equal 'bar'

    describe 'www_root', ->

      it "defaults to 'www'", ->
        router = new Router()
        expect(router.www_root).to.equal 'www'

      it 'uses the given configuration value', ->
        router = new Router www_root: 'foo'
        expect(router.www_root).to.equal 'foo'


  describe 'add_route', ->

    beforeEach ->
      @router = new Router()

    it 'adds the given url and handler to the routing table', ->
      @router.add_route 'GET', '/foo/bar', 'handler 1'
      expect(@router.get_handler 'GET', '/foo/bar').to.eql ['handler 1', {}]


    it 'adds the given url and handler to the routing table', ->
      @router.add_route 'GET', '/foo/:id', 'handler'
      expect(@router.get_handler 'GET', '/foo/123').to.eql ['handler', {id: '123'}]

    it "doesn't lose wildcard sub nodes when adding a handler to the wildcard route", ->
      @router.add_route 'GET', '/foo/:id/edit', 'handler'
      @router.add_route 'GET', '/foo/:id', 'handler'
      expect(@router.get_handler 'GET', '/foo/123/edit').to.eql ['handler', {id: '123'}]

    it 'throws an exception if the given URL is already being served', ->
      @router.add_route 'GET', 'url', 'handler 1'
      method = => @router.add_route 'GET', 'url', 'handler 1'
      expect(method).to.throw /Duplicate route/


  describe 'create_handler', ->

    beforeEach ->
      @router = new Router view_types: ['.html', '.as_ejs', '.as_eco']

    it 'ignores hidden files', ->
      @router.create_handler 'www/_foo.coffee'
      expect(ObjectTools.size @router.routes.sub_nodes).to.equal 0

    it 'handles sections with only an as_eco view', ->
      @router.create_handler 'www/foo/foo.html.as_eco', []
      expect(@router.get_handler 'GET', '/foo').to.not.be.undefined

    it 'handles sections with only an as_ejs view', ->
      @router.create_handler 'www/foo/foo.html.as_ejs', []
      expect(@router.get_handler 'GET', '/foo').to.not.be.undefined

    it 'handles sections with only a static views', ->
      @router.create_handler 'www/foo/foo.html', []
      expect(@router.get_handler 'GET', '/foo').to.not.be.undefined

    it 'creates a handler for the controller if the section has no view', ->
      @router.create_handler 'www/foo/foo_controller.coffee', []
      expect(@router.get_handler 'GET', '/foo').to.not.be.undefined

    it 'does not create a handler for the controller if the section has a view', ->
      @router.create_handler 'www/foo/foo_controller.coffee', ['www/foo/foo.html']
      expect(ObjectTools.size @router.routes.sub_routes).to.equal 0

    it 'handles CoffeeScript assets', ->
      @router.create_handler 'www/foo/foo.coffee'
      expect(@router.get_handler 'GET', '/foo/foo.js').to.not.be.undefined

    it 'handles other static assets', ->
      @router.create_handler 'www/foo/icon.png'
      expect(@router.get_handler 'GET', '/foo/icon.png').to.not.be.undefined


  describe 'get_handler', ->

    beforeEach ->
      @router = new Router()

    it 'returns the handler associated with the given URL', ->
      @router.add_route 'GET', 'url', 'handler'
      expect(@router.get_handler 'GET', 'url').to.eql ['handler', {}]

    it 'returns undefined if the URL is not registered', ->
      expect(@router.get_handler 'GET', 'zonk').to.eql [undefined, {}]

    it 'adds the paramters from GET requests to the params hash', ->
      @router.add_route 'GET', 'url', 'handler'
      result = @router.get_handler 'GET', 'url?one=1&two=2'
      console.log result
      expect(result).to.eql ['handler', {one: '1', two: '2'}]

  describe 'is_hidden_filename', ->
    beforeEach ->
      @router = new Router()

    it 'hides files whose name starts with an underscore', ->
      expect(@router.is_hidden_filename 'foo/_secret.key').to.be.true

    it 'hides partials if any of their parent directories starts with an underscore', ->
      expect(@router.is_hidden_filename 'one/_two/three/three.html').to.be.true

    it 'does not hide assets from sections even if a parent directory starts with an underscore', ->
      expect(@router.is_hidden_filename 'one/_two/three/three.css').to.be.false

    it 'does not hide other files', ->
      expect(@router.is_hidden_filename 'foo').to.be.false


  describe 'section_url', ->
    beforeEach ->
      @router = new Router www_root: 'server/directory/www'

    it 'returns the URL of the section in the given file path', ->
      expect(@router.section_url 'server/directory/www/one/two/two.html').to.eql ['GET', '/one/two']

    it "returns '/' for the root section", ->
      expect(@router.section_url('server/directory/www/www.html')).to.eql ['GET', '/']

    it 'returns a GET url to the base if the section name is $get', ->
      expect(@router.section_url 'server/directory/www/one/two/$get/$get.html').to.eql ['GET', '/one/two']

    it 'returns a POST url to the base if the section name is $post', ->
      expect(@router.section_url 'server/directory/www/one/two/$post/$post.html').to.eql ['POST', '/one/two']

    it 'returns a PUT url to the base if the section name is $put', ->
      expect(@router.section_url 'server/directory/www/one/two/$put/$put.html').to.eql ['PUT', '/one/two']

    it 'returns a DELETE url to the base if the section name is $put', ->
      expect(@router.section_url 'server/directory/www/one/two/$delete/$delete.html').to.eql ['DELETE', '/one/two']

    it "returns the 'index' url if the section name is $index", ->
      expect(@router.section_url 'server/directory/www/one/two/$index/$index.html').to.eql ['GET', '/one/two']

    it "returns the 'new' url if the section name is $new", ->
      expect(@router.section_url 'server/directory/www/one/two/$new/$new.html').to.eql ['GET', '/one/two/new']

    it "returns the 'create' url if the section name is $create", ->
      expect(@router.section_url 'server/directory/www/one/two/$create/$create.html').to.eql ['POST', '/one/two']

    it "returns the 'show' url if the section name is $show", ->
      expect(@router.section_url 'server/directory/www/one/two/$show/$show.html').to.eql ['GET', '/one/two/:id']

    it "returns the 'edit' url if the section name is $edit", ->
      expect(@router.section_url 'server/directory/www/one/two/$edit/$edit.html').to.eql ['GET', '/one/two/:id/edit']

    it "returns the 'update' url if the section name is $update", ->
      expect(@router.section_url 'server/directory/www/one/two/$update/$update.html').to.eql ['PUT', '/one/two/:id']

    it "returns the 'destroy' url if the section name is $destroy", ->
      expect(@router.section_url 'server/directory/www/one/two/$destroy/$destroy.html').to.eql ['DELETE', '/one/two/:id']


  describe 'asset_url', ->
    it 'returns the URL for the given file path', ->
      router = new Router()
      expect(router.asset_url('www/foo/bar')).to.eql ['GET', '/foo/bar']

