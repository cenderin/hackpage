[expect, sinon] = require '../test_helper'
portFinder = require 'portfinder'
util = require 'util'
Compositive = require '../../src/compositive.coffee'
HttpTools = require '../../src/tools/http_tools.coffee'


describe 'Integration tests', ->

  before (done) ->
    portFinder.getPort (err, @port) =>
      throw "Error at start of integration tests: #{err}" if err
      @compositive = new Compositive www_root: 'test/integration'
      @compositive.listen @port, ->
        done()

  after ->
    @compositive.close()


  describe 'clientside CoffeeScript', ->

    it 'serves clientside JavaScript files as JavaScript to the client', (done) ->
      HttpTools.get "http://localhost:#{@port}/clientside_js/javascript.js", (body, status) ->
        expect(status).to.equal 200
        expect(body).to.equal "alert('This is a JavaScript file');\n"
        done()

    it 'serves clientside CoffeeScript files as JavaScript to the client', (done) ->
      HttpTools.get "http://localhost:#{@port}/clientside_js/coffeescript.js", (body, status) ->
        expect(status).to.equal 200
        expect(body).to.equal "(function() {\n\n  alert(\'This is a CoffeeScript file\');\n\n}).call(this);\n"
        done()


  describe 'controllers', ->

    it 'works', (done) ->
      HttpTools.get "http://localhost:#{@port}/controllers", (body, status) ->
        expect(status).to.equal 200
        expect(body).to.equal 'My name is Action Jackson.'
        done()


  describe 'hidden files', ->

    it 'shows normal files', (done) ->
      HttpTools.get "http://localhost:#{@port}/hidden_files/static.png", (body, status) ->
        expect(status).to.equal 200
        done()

    it 'shows partials', (done) ->
      HttpTools.get "http://localhost:#{@port}/hidden_files", (body, status) ->
        expect(status).to.equal 200
        done()

    it 'does not show controllers', (done) ->
      HttpTools.get "http://localhost:#{@port}/hidden_files/www_controller.js", (body, status) ->
        expect(status).to.equal 404
        done()

    it 'does not show hidden files', (done) ->
      HttpTools.get "http://localhost:#{@port}/hidden_files/_secret.key", (body, status) ->
        expect(status).to.equal 404
        done()


  describe 'http_verbs', ->

    it 'uses GET as the default', (done) ->
      HttpTools.request 'GET', '127.0.0.1', @port, '/http_verbs/default', '', (body, status) ->
        expect(status).to.equal 200
        done()

    describe 'non-restful', ->
      it "uses GET for sections whose name is '$get'", (done) ->
        HttpTools.request 'GET', '127.0.0.1', @port, '/http_verbs/non-restful', '', (body, status) ->
          expect(status).to.equal 200
          done()

      it "uses POST for sections whose name is '$post'", (done) ->
        HttpTools.request 'POST', '127.0.0.1', @port, '/http_verbs/non-restful', '', (body, status) ->
          expect(status).to.equal 200
          done()

      it "uses PUT for sections whose name is '$PUT'", (done) ->
        HttpTools.request 'PUT', '127.0.0.1', @port, '/http_verbs/non-restful', '', (body, status) ->
          expect(status).to.equal 200
          done()

      it 'uses DELETE for sections whose name is $DELETE', (done) ->
        HttpTools.request 'DELETE', '127.0.0.1', @port, '/http_verbs/non-restful', '', (body, status) ->
          expect(status).to.equal 200
          done()

    describe 'restful', ->

      it 'handles the $index action', (done) ->
        HttpTools.request 'GET', '127.0.0.1', @port, '/http_verbs/restful', '', (body, status) ->
          expect(status).to.equal 200
          expect(body).to.equal "Yes, I'm here!\n"
          done()

      it 'handles the $new action', (done) ->
        HttpTools.request 'GET', '127.0.0.1', @port, '/http_verbs/restful/new', '', (body, status) ->
          expect(status).to.equal 200
          done()

      it 'handles the $create action', (done) ->
        HttpTools.request 'POST', '127.0.0.1', @port, '/http_verbs/restful', '', (body, status) ->
          expect(status).to.equal 200
          done()

      it 'handles the $show action', (done) ->
        HttpTools.request 'GET', '127.0.0.1', @port, '/http_verbs/restful/123', '', (body, status) ->
          expect(status).to.equal 200
          done()

      it 'handles the $edit action', (done) ->
        HttpTools.request 'GET', '127.0.0.1', @port, '/http_verbs/restful/123/edit', '', (body, status) ->
          expect(status).to.equal 200
          done()

      it 'handles the $update action', (done) ->
        HttpTools.request 'PUT', '127.0.0.1', @port, '/http_verbs/restful/123', '', (body, status) ->
          expect(status).to.equal 200
          done()

      it 'handles the $destroy action', (done) ->
        HttpTools.request 'DELETE', '127.0.0.1', @port, '/http_verbs/restful/123', '', (body, status) ->
          expect(status).to.equal 200
          done()


  describe 'request parameters', ->

    it 'provides GET parameters in @params', (done) ->
      HttpTools.request 'GET', '127.0.0.1', @port, '/request_parameters?first=James&last=Bond', '', (body, status) ->
        expect(status).to.equal 200
        expect(body).to.equal 'Hey James, your initials are JB.'
        done()

    it 'provides traditional POST parameters in @params', (done) ->
      HttpTools.request 'POST', '127.0.0.1', @port, '/request_parameters', {first: 'James', last: 'Bond'}, (body, status) ->
        expect(status).to.equal 200
        expect(body).to.equal 'Hey James, your initials are JB.'
        done()

    it 'provides JSON-POST parameters in @params', (done) ->
      HttpTools.post_json '127.0.0.1', @port, '/request_parameters', {first: 'James', last: 'Bond'}, (body, status) ->
        expect(status).to.equal 200
        expect(body).to.equal 'Hey James, your initials are JB.'
        done()

    it 'provides parameters from the URL in @params', (done) ->
      HttpTools.request 'GET', '127.0.0.1', @port, '/request_parameters/in_url/Jimmy', '', (body, status) ->
        expect(status).to.equal 200
        expect(body).to.equal 'Hey Jimmy!'
        done()


  describe 'routing', ->

    it 'returns a 404 if the given path matches an existing route only incompletely', (done) ->
      HttpTools.request 'GET', '127.0.0.1', @port, '/routing', '', (body, status) ->
        expect(status).to.equal 404
        done()



  describe 'templating engines', ->

    describe 'AsEjs', ->

      it 'works', (done) ->
        HttpTools.request 'GET', '127.0.0.1', @port, '/templating_engines/as_ejs', '', (body, status) ->
          expect(status).to.equal 200
          done()


    describe 'AsEco', ->

      it 'works', (done) ->
        HttpTools.request 'GET', '127.0.0.1', @port, '/templating_engines/as_eco', '', (body, status) ->
          expect(status).to.equal 200
          done()
