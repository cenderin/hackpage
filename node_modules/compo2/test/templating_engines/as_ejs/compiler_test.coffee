[expect, sinon] = require('../../test_helper')
Compiler = require '../../../src/templating_engines/as_ejs/compiler'


describe 'AsEjs Compiler', ->

  describe 'compile', ->

    it 'renders text into the out stream', ->
      compiler = new Compiler [ { type: 'text', data: 'one'} ]
      expect(compiler.compile()).to.equal """(function(out, done, escape) {
                                               with (this) {
                                                 out("one");
                                                 done();
                                               }
                                             })"""

    it 'converts newlines into spaces', ->
      compiler = new Compiler [ { type: 'text', data: "one\n\ntwo\n\n"} ]
      expect(compiler.compile()).to.equal """(function(out, done, escape) {
                                               with (this) {
                                                 out(\"onetwo\");
                                                 done();
                                               }
                                             })"""

    it 'renders javascript expressions into the out stream', ->
      compiler = new Compiler [ { type: 'jsexp', data: 'var a = 1; '} ]
      expect(compiler.compile()).to.equal """(function(out, done, escape) {
                                               with (this) {
                                                 var a = 1;
                                                 done();
                                               }
                                             })"""

    it 'removes whitespace around javascript expressions', ->
      compiler = new Compiler [ { type: 'jsexp', data: '  var a = 1;  '} ]
      expect(compiler.compile()).to.equal """(function(out, done, escape) {
                                               with (this) {
                                                 var a = 1;
                                                 done();
                                               }
                                             })"""

    it 'renders javascript output into the out stream', ->
      compiler = new Compiler [ { type: 'jsout', data: 'foo'} ]
      expect(compiler.compile()).to.equal """(function(out, done, escape) {
                                               with (this) {
                                                 out(escape(foo));
                                                 done();
                                               }
                                             })"""

    it 'html-escapes javascript output', ->
      compiler = new Compiler [ { type: 'jsout', data: 'foo'} ]
      expect(compiler.compile()).to.equal """(function(out, done, escape) {
                                               with (this) {
                                                 out(escape(foo));
                                                 done();
                                               }
                                             })"""

    it 'renders javascript if and end clauses into the out stream', ->
      compiler = new Compiler [ { type: 'jsif', data: 'a === 1'}, { type: 'jsend', data: '' } ]
      expect(compiler.compile()).to.equal """(function(out, done, escape) {
                                               with (this) {
                                                 if (a === 1) {
                                                 }
                                                 done();
                                               }
                                             })"""

    it 'renders javascript else clauses into the out stream', ->
      compiler = new Compiler [ { type: 'jsif', data: 'a === 1'}, { type: 'jselse', data: '' }, { type: 'jsend', data: '' } ]
      expect(compiler.compile()).to.equal """(function(out, done, escape) {
                                               with (this) {
                                                 if (a === 1) {
                                                 } else {
                                                 }
                                                 done();
                                               }
                                             })"""

    it 'renders javascript for loops into the out stream', ->
      compiler = new Compiler [ { type: 'jsfor', data: 'user in users'}, { type: 'jsend', data: '' } ]
      expect(compiler.compile()).to.equal """(function(out, done, escape) {
                                               with (this) {
                                                 for (user in users) {
                                                 }
                                                 done();
                                               }
                                             })"""

    it 'renders async expressions properly', ->
      compiler = new Compiler [ { type: 'jsasync', data: 'user.get, user'} ]
      expect(compiler.compile()).to.equal """(function(out, done, escape) {
                                               with (this) {
                                                 user.get(function(user) {
                                                   done();
                                                 });
                                               }
                                             })"""

    it 'closes several layers of async functions properly', ->
      compiler = new Compiler [ { type: 'jsasync', data: 'user.get, user'}, { type: 'jsasync', data: 'city.get, city'} ]
      expect(compiler.compile()).to.equal """(function(out, done, escape) {
                                               with (this) {
                                                 user.get(function(user) {
                                                   city.get(function(city) {
                                                     done();
                                                   });
                                                 });
                                               }
                                             })"""

    it 'renders section expressions properly', ->
      compiler = new Compiler [ { type: 'jssection', data: '"foo"'} ]
      expect(compiler.compile()).to.equal """(function(out, done, escape) {
                                               with (this) {
                                                 out('section "foo" here');
                                                 done();
                                               }
                                             })"""


  describe 'spaces', ->

    it 'returns 4 spaces normal indentation', ->
      compiler = new Compiler 'name', []
      expect(compiler.spaces()).to.equal '    '

    it 'returns 6 spaces for the first indentation level', ->
      compiler = new Compiler 'name', []
      compiler.callback_level = 1
      expect(compiler.spaces()).to.equal '      '

    it 'returns 8 spaces for the second indentation level', ->
      compiler = new Compiler 'name', []
      compiler.callback_level = 2
      expect(compiler.spaces()).to.equal '        '
