[expect, sinon] = require('../../test_helper')
Parser = require '../../../src/templating_engines/as_ejs/parser'


describe 'AsEjs Parser', ->

  describe 'parse', ->

    it 'parses the given AsEjs text', ->
      result = Parser.parse 'one <% two %> three'
      expect(result).to.have.length 3
      expect(result[0]).to.eql type: 'text', data: 'one '
      expect(result[1]).to.eql type: 'jsexp', data: 'two'
      expect(result[2]).to.eql type: 'text', data: ' three'


  describe 'recognize_js_segment', ->

    it 'leaves TEXT segments alone', ->
      result = Parser.recognize_js_segment type: 'text', data: 'foo'
      expect(result).to.eql type: 'text', data: 'foo'

    it 'recognizes JS expressions', ->
      result = Parser.recognize_js_segment type: 'js', data: ' var a=1; '
      expect(result).to.eql type: 'jsexp', data: 'var a=1;'

    it 'recognizes JS output', ->
      result = Parser.recognize_js_segment type: 'js', data: '= 1+1 '
      expect(result).to.eql type: 'jsout', data: '1+1'

    it 'recognizes JS if clauses', ->
      result = Parser.recognize_js_segment type: 'js', data: 'if a'
      expect(result).to.eql type: 'jsif', data: 'a'

    it 'recognizes JS if clauses with whitespace', ->
      result = Parser.recognize_js_segment type: 'js', data: ' if a'
      expect(result).to.eql type: 'jsif', data: 'a'

      it 'recognizes JS else clauses', ->
      result = Parser.recognize_js_segment type: 'js', data: ' else '
      expect(result).to.eql type: 'jselse', data: ''

    it 'recognizes JS end clauses', ->
      result = Parser.recognize_js_segment type: 'js', data: ' end '
      expect(result).to.eql type: 'jsend', data: ''

    it 'recognizes JS for loops', ->
      result = Parser.recognize_js_segment type: 'js', data: ' for user in users '
      expect(result).to.eql type: 'jsfor', data: 'user in users'

    it 'recognizes JSASYNC expressions', ->
      result = Parser.recognize_js_segment type: 'js', data: "async user, 'get', 'result' "
      expect(result).to.eql type: 'jsasync', data: " user, 'get', 'result' "

    it 'recognizes JSASYNC expressions with leading space', ->
      result = Parser.recognize_js_segment type: 'js', data: " async user, 'get', 'result' "
      expect(result).to.eql type: 'jsasync', data: " user, 'get', 'result' "

    it 'recognizes JSSECTION expressions', ->
      result = Parser.recognize_js_segment type: 'js', data: "section 'foo' "
      expect(result).to.eql type: 'jssection', data: "'foo'"

    it 'recognizes JSSECTION expressions with leading space', ->
      result = Parser.recognize_js_segment type: 'js', data: " section 'foo' "
      expect(result).to.eql type: 'jssection', data: "'foo'"


  describe 'segments', ->

    it 'returns arrays', ->
      result = Parser.segments ''
      expect(result).to.be.instanceof Array

    it 'returns static text as a TEXT segment', ->
      result = Parser.segments 'foo'
      expect(result).to.have.length 1
      expect(result[0]).to.eql type: 'text', data: 'foo'

    it 'returns JS expressions as a JS segment', ->
      result = Parser.segments '<% var a=1; %>'
      expect(result).to.have.length 1
      expect(result[0]).to.eql type: 'js', data: ' var a=1; '

    it 'returns JS output as a JS segment', ->
      result = Parser.segments '<%= 1+1 %>'
      expect(result).to.have.length 1
      expect(result[0]).to.eql type: 'js', data: '= 1+1 '

    it 'returns an asynchronous JS expression as a JS segment', ->
      result = Parser.segments "<%async user.get, result %>"
      expect(result).to.have.length 1
      expect(result[0]).to.eql type: 'js', data: "async user.get, result "

    it 'allows to have spaces before the async keyword', ->
      result = Parser.segments "<% async user.get, result %>"
      expect(result).to.have.length 1
      expect(result[0]).to.eql type: 'js', data: " async user.get, result "

    it 'can handle lots of different segments in a text', ->
      result = Parser.segments 'one <% two %> three <% four %> five'
      expect(result).to.have.length 5
      expect(result[0]).to.eql type: 'text', data: 'one '
      expect(result[1]).to.eql type: 'js', data: ' two '
      expect(result[2]).to.eql type: 'text', data: ' three '
      expect(result[3]).to.eql type: 'js', data: ' four '
      expect(result[4]).to.eql type: 'text', data: ' five'

