[expect, sinon] = require('../../test_helper')
AsEjs = require '../../../src/templating_engines/as_ejs/as_ejs'
StringBuilder = require 'string_builder.js'


describe 'AsEjs', ->

  beforeEach ->
    @as_ejs = new AsEjs

  describe 'compile', ->

    it 'converts the given template into a function and stores it', ->
      @as_ejs.compile 'bar'
      expect(@as_ejs.render_function).to.not.be.undefined


  describe 'compile_file', ->

    it 'compiles the given file', (done) ->
      @as_ejs.compile_file './test/templating_engines/as_ejs/resources/asejs_test.as_ejs', =>
        expect(@as_ejs.render_function).to.not.be.undefined
        done()


  describe 'escape', ->

    it 'escapes html tags', ->
      expect(@as_ejs.escape('<script>')).to.equal '&lt;script&gt;'

    it 'escapes ampersands', ->
      expect(@as_ejs.escape('foo & bar')).to.equal 'foo &amp; bar'

    it 'escapes double-quotes', ->
      expect(@as_ejs.escape('"')).to.equal '&quot;'

    it 'converts non-string parameters to string first', ->
      expect(@as_ejs.escape(5)).to.equal '5'


  describe 'render', ->

    beforeEach ->
      @result = new StringBuilder()

    it 'renders static text through the given output stream', (done) ->
      @as_ejs.compile 'text'
      @as_ejs.render {}, @result.append, =>
        expect(@result.toString()).to.eql 'text'
        done()

    it 'renders javascript into the output stream', (done) ->
      @as_ejs.compile '<% var a = 5; %><%= a %>'
      @as_ejs.render {}, @result.append, =>
        expect(@result.toString()).to.eql '5'
        done()

    it 'appends semicolons to the end of a JS expression', (done) ->
      @as_ejs.compile '<% var a = 5 %><%= a %>'
      @as_ejs.render {}, @result.append, =>
        expect(@result.toString()).to.eql '5'
        done()

    it 'renders data into the template', (done) ->
      @as_ejs.compile '<%= a %>'
      @as_ejs.render { a: 5 }, @result.append, =>
        expect(@result.toString()).to.eql '5'
        done()

    it 'HTML-escapes data inserted into the template', (done) ->
      @as_ejs.compile '<%= a %>'
      @as_ejs.render { a: '<script>' }, @result.append, =>
        expect(@result.toString()).to.eql '&lt;script&gt;'
        done()


    describe 'asynchronous JS', ->

      it 'renders single layers', (done) ->
        @as_ejs.compile '<%async user.get, user %><%= user %>'
        user_future = { get: (done) -> done 5 }
        @as_ejs.render { user: user_future }, @result.append, =>
          expect(@result.toString()).to.eql '5'
          done()

      it 'renders multiple layers', (done) ->
        @as_ejs.compile '<%async user.get, user %><%async city.get, city %><%= city %>'
        user_future = { get: (done) -> done 5 }
        city_future = { get: (done) -> done 6 }
        @as_ejs.render { user: user_future, city: city_future }, @result.append, =>
          expect(@result.toString()).to.eql '6'
          done()


    describe 'if clauses', ->

      it 'supports hard-coded JS if clauses', (done) ->
        @as_ejs.compile """<% if (a) { %>
                             yes!
                           <% } %>"""
        @as_ejs.render { a: true }, @result.append, =>
          expect(@result.toString().trim()).to.equal 'yes!'
          done()

      it 'renders the happy path if the clause is truthy', (done) ->
        @as_ejs.compile """<% if a %>
                             yes!
                           <% end %>"""
        @as_ejs.render { a: true }, @result.append, =>
          expect(@result.toString().trim()).to.equal 'yes!'
          done()

      it 'renders the unhappy path if the clause is falsy', (done) ->
        @as_ejs.compile """<% if a %>
                             yes!
                           <% else %>
                             no!
                           <% end %>"""
        @as_ejs.render { a: false }, @result.append, =>
          expect(@result.toString().trim()).to.equal 'no!'
          done()


    describe 'for loops', ->

      it 'renders hard-coded for loops', (done) ->
        template = """<% for (var i=1; i<3; i++) { %>
                        i: <%= i %>
                      <% } %>"""
        @as_ejs.compile template
        @as_ejs.render {}, @result.append, =>
          expect(@result).to.match /i: 1\s*i: 2/
          done()

      it 'renders built-in for loops'


    describe 'sections', ->

      it 'supports sections', ->
        @as_ejs.compile '<%section "foo" %>'
        @as_ejs.render {}, @result.append, =>
          expect(@result.toString()).to.eql ''
          done()

