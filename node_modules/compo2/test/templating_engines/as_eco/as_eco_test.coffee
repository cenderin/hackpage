[expect, sinon] = require('../../test_helper')
AsEco = require '../../../src/templating_engines/as_eco/as_eco'
StringBuilder = require 'string_builder.js'


describe 'AsEco', ->

  beforeEach ->
    @as_eco = new AsEco


  describe 'compile', ->
    it 'converts the template into a function', ->
      @as_eco.compile 'bar'
      expect(@as_eco.render_function).to.not.be.undefined


  describe 'compile_file', ->

    it 'compiles the given file', (done) ->
      @as_eco.compile_file './test/templating_engines/as_eco/resources/aseco_test.as_eco', =>
        expect(@as_eco.render_function).to.not.be.undefined
        done()


  describe 'escape', ->

    it 'escapes html tags', ->
      expect(@as_eco.escape('<script>')).to.equal '&lt;script&gt;'

    it 'escapes ampersands', ->
      expect(@as_eco.escape('foo & bar')).to.equal 'foo &amp; bar'

    it 'escapes double-quotes', ->
      expect(@as_eco.escape('"')).to.equal '&quot;'

    it 'converts non-string parameters to string first', ->
      expect(@as_eco.escape(5)).to.equal '5'


  describe 'render', ->

    beforeEach ->
      @result = new StringBuilder()

    it 'renders static text through the given output stream', (done) ->
      @as_eco.compile 'text'
      @as_eco.render {}, @result.append, =>
        expect(@result.toString()).to.equal 'text'
        done()

    it 'renders javascript into the output stream', (done) ->
      @as_eco.compile '''
                      <% a = 5 %>
                      <%= a %>
                      '''
      @as_eco.render {}, @result.append, =>
        expect(@result.toString()).to.eql '5'
        done()

    it 'renders data into the template', (done) ->
      @as_eco.compile '<%= @a %>'
      @as_eco.render { a: 5 }, @result.append, =>
        expect(@result.toString()).to.eql '5'
        done()

    it 'HTML-escapes data inserted into the template', (done) ->
      @as_eco.compile '<%= @a %>'
      @as_eco.render { a: '<script>' }, @result.append, =>
        expect(@result.toString()).to.eql '&lt;script&gt;'
        done()


    describe 'asynchronous CS', ->

      it 'works on a single level', ->
        @as_eco.compile '<%async @user_future.get, user %><%= user %>'
        @as_eco.render { user_future: { get: -> 5 }}, @result.append, =>
          expect(@result.toString()).to.eql '5'
          done()

      it 'works on multiple levels', ->
        @as_eco.compile '<%async @user_future.get, user %><%async @city_future.get, city %><%= city %>'
        user_future = { get: -> 5 }
        city_future = { get: -> 6 }
        @as_eco.render { user_future: user_future, city_future: city_future }, @result.append, =>
          expect(@result.toString()).to.eql '6'
          done()


    describe 'if clauses', ->

      it 'renders the happy path if the clause is truthy', (done) ->
        @as_eco.compile """<% if @a: %>
                             yes!
                           <% end %>"""
        @as_eco.render { a: true }, @result.append, =>
          expect(@result.toString().trim()).to.equal 'yes!'
          done()

      it 'renders the unhappy path if the clause is falsy', (done) ->
        @as_eco.compile """<% if @a: %>
                             yes!
                           <% else: %>
                             no!
                           <% end %>"""
        @as_eco.render { a: false }, @result.append, =>
          expect(@result.toString().trim()).to.equal 'no!'
          done()


    describe 'for-loops', ->

      it 'renders for-loops', (done) ->
        @as_eco.compile """<% for i in [1,2]: %>
                             i: <%= i %>
                           <% end %>"""
        @as_eco.render {}, @result.append, =>
          expect(@result.toString()).to.match /i: 1\s*i: 2/
          done()

