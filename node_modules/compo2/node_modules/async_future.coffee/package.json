{
  "name": "async_future.coffee",
  "version": "0.1.1",
  "description": "An asynchronous future class, written in CoffeeScript.",
  "devDependencies": {
    "mocha": "latest",
    "coffee-script": "latest",
    "chai": "latest",
    "sinon": "latest",
    "sinon-chai": "latest"
  },
  "main": "src/async_future.coffee",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "./node_modules/.bin/mocha --colors --compilers coffee:coffee-script"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/kevgo/async_future.coffee.git"
  },
  "author": {
    "name": "Kevin Goslar"
  },
  "license": "MIT",
  "readme": "# AsyncFuture.coffee <a href=\"http://travis-ci.org/#!/kevgo/async_future.coffee\" target=\"_blank\"><img src=\"https://secure.travis-ci.org/kevgo/async_future.coffee.png\" alt=\"Build status\"></a>\n\nAn asynchronous Future class, written in CoffeeScript.\n\n\n## What are Futures?\n_Futures provide a simple API for running parallel operations in the background, and pick up their results at a later time (in the \"future\")._\n\nBy encapsulating the management of parallel operations, Futures allow to create sophisticated parallel application behavior using a simple, single-threaded programming style.\nThis library provides Futures asynchronous interface, as is typical in [Node.js](http://nodejs.org) environments.\nFutures support Node's asynchronous, event-driven flow patterns very naturally.\n\nHere is an example:\n\n1. Start a parallel operation that performs a long-running method, store it in a Future.\n2. Do other things in your main thread. Take your time.\n3. When done with (2), pick up the result of the parallel operation from the future created in (1).\n4. Both long-running operations - (1) and (2) - have run in parallel, but were coded like a single-threaded application.\n\n\n\n## Installation\n\n```bash\nnpm install async_future.coffee\n```\n\n\n## Usage\n\n```coffeescript\nuser_future = new AsyncFuture load_user, user_id\n\n# Do something else now.\n\nuser_future.get (user) ->\n  console.log \"This user was loaded in the background, and it didn't hurt: #{user}\"\n```\n\n\n## Examples\n\nThe directory [/examples](https://github.com/kevgo/async_future.coffee/tree/master/examples) contains a number of usage examples that visualize better how futures work.\nYou can run them simply by doing `coffee [filename]` in the terminal.\n\n### Delay Futures\n\nThe directory [/examples/delay_future](https://github.com/kevgo/async_future.coffee/tree/master/examples/delay_future) demonstrates how futures operate on the time line.\n\n[1_waits_for_results.coffee](https://github.com/kevgo/async_future.coffee/blob/master/examples/delay_future/1_waits_for_results.coffee): Demonstrates how Futures wait until they receive the results before they call the callback method given.\n\n[2_has_results.coffee](https://github.com/kevgo/async_future.coffee/blob/master/examples/delay_future/2_has_results.coffee): Demonstrates how Futures hold on to the result of the parallel operation until it is requested by their get method.\n\n\n## Development\n\nTo run the tests:\n```bash\n$ npm test\n```\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/kevgo/async_future.coffee/issues"
  },
  "homepage": "https://github.com/kevgo/async_future.coffee",
  "_id": "async_future.coffee@0.1.1",
  "_from": "async_future.coffee@latest"
}
